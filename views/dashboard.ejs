<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            overflow-x: hidden;
        }
        .container {
            max-width: 1400px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            animation: slide-in 0.5s ease-out;
        }
        @keyframes slide-in {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #758ECD;
            animation: color-change 2s infinite alternate;
        }
        @keyframes color-change {
            from {
                color: #758ECD;
            }
            to {
                color: #5679A6;
            }
        }
        #calendar {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
            animation: slide-up 1s ease-out;
        }
        @keyframes slide-up {
            from {
                opacity: 0;
                transform: translateY(50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        #calendar input[type="date"] {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            outline: none;
        }
        .order-display {
            overflow: auto;
            animation: slide-left 1s ease-out;
        }
        @keyframes slide-left {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: #f9f9f9;
            animation: fade-in 1s ease-out;
        }
        @keyframes fade-in {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
        th, td {
            padding: 15px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #758ECD;
            color: #fff;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .options {
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            outline: none;
            background-color: #758ECD;
            color: #fff;
        }
        .options:hover {
            background-color: #5679A6;
        }
        #others input {
            background-color: red;
            padding: 10px;
            border-radius: 8px;
            font-size: 14px;
            color: white;
        }
    </style>w
</head>
<body>
    <div class="container">
        <h1>Order Dashboard</h1>
        <div id="calendar">
            <input type="date">
        </div>
        <div class="order-display">
            <table id="order-table">
                <thead>
                    <tr>
                        <th>Slno.</th>
                        <th>Customer Name</th>
                        <th>Bottle Volume</th>
                        <th>Quantity</th>
                        <th>Delivery Date</th>
                        <th>Status</th>
                        <th>Timer</th>
                    </tr>
                </thead>
                <tbody>
                    <% all_orders.forEach((order) => { %>
                        <%
                            const fullDate = new Date(order.delivery_date);
                            const year = fullDate.getFullYear();
                            const month = (fullDate.getMonth() + 1).toString().padStart(2, '0');
                            const day = fullDate.getDate().toString().padStart(2, '0');
                            const deliverydate = `${year}-${month}-${day}`;
                        %>  
                        <tr data-quantity="<%= order.quantity %>">
                            <td class="seq"><%= order.sequence %></td>
                            <td><%= order.customer_name %></td>
                            <td><%= order.volume*1000 %></td> 
                            <td><%= order.quantity %></td> 
                            <td><%= deliverydate %></td>                   
                            <td id="others">
                                <input type="button" value="Bottle Availability" class="options">
                                <input type="button" value="Clipping" class="options">
                                <input type="button" value="Washing" class="options">
                                <input type="button" value="Rinsing" class="options">
                                <input type="button" value="Filling" class="options">
                                <input type="button" value="Capping" class="options">
                                <input type="button" value="Batch Coding" class="options">
                                <input type="button" value="QC" class="options">
                                <input type="button" value="Packaging" class="options">
                                <input type="button" value="Dispatch" class="options">
                            </td>
                            <td class="timer" data-timer-id="<%= order.sequence %>">00:00:00</td>
                        </tr>   
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <div class="second-table">
        <table>
            <thead>

            </thead>
        </table>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            let currentTimerInterval = null;
            attachStatusChangeListeners();
            document.querySelector('#calendar input[type="date"]').addEventListener('change', async function() {
                let selected_date = this.value;
                try {
                    const response = await fetch('/filtered', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ selected_date })
                    });
                    if (response.ok) {
                        const filteredOrders = await response.json();
                        updateOrderDisplay(filteredOrders);
                        attachStatusChangeListeners();
                        alert('Orders filtered successfully');
                    } else {
                        alert('Failed to filter orders');
                    }
                } catch (error) {
                    console.log('Error filtering orders:', error);
                    alert('Error filtering orders');
                }
            });

            function attachStatusChangeListeners() {
                document.querySelectorAll('.options').forEach(button => {
                    button.addEventListener('click', async function() {
                        const orderId = this.closest('tr').querySelector('.seq').textContent;
                        const type = this.value;
                        const timerElement = this.closest('tr').querySelector('.timer');
                        const quantity = this.closest('tr').dataset.quantity;
                        
                        if (currentTimerInterval) {
                            clearInterval(currentTimerInterval);
                        }

                        startTimer(timerElement, quantity);

                        try {
                            const response = await fetch('/update_order_status', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ orderId, type })
                            });
                            if (response.ok) {
                                alert('Order status updated successfully');
                            } else {
                                alert('Failed to update order status');
                            }
                        } catch (error) {
                            alert('Error updating order status:', error);
                        }
                    });
                });
            }
            
            function startTimer(timerElement, quantity) {
                const totalSeconds = Math.ceil((quantity / 500) * 3600);
                let remainingSeconds = totalSeconds;

                function updateTimer() {
                    const hours = Math.floor(remainingSeconds / 3600).toString().padStart(2, '0');
                    const minutes = Math.floor((remainingSeconds % 3600) / 60).toString().padStart(2, '0');
                    const seconds = (remainingSeconds % 60).toString().padStart(2, '0');
                    timerElement.textContent = `${hours}:${minutes}:${seconds}`;

                    if (remainingSeconds > 0) {
                        remainingSeconds -= 1;
                    } else {
                        clearInterval(currentTimerInterval);
                    }
                }

                currentTimerInterval = setInterval(updateTimer, 1000);
                updateTimer(); 
            }

            function updateOrderDisplay(orders) {
                const tbody = document.querySelector('#order-table tbody');
                tbody.innerHTML = '';
                orders.forEach(order => {
                    const fullDate = new Date(order.delivery_date);
                    const year = fullDate.getFullYear();
                    const month = (fullDate.getMonth() + 1).toString().padStart(2, '0');
                    const day = fullDate.getDate().toString().padStart(2, '0');
                    const deliverydate = `${year}-${month}-${day}`;
                    const row = `
                        <tr data-quantity="${order.quantity}">
                            <td class="seq">${order.sequence}</td>
                            <td>${order.customer_name}</td>
                            <td>${order.volume * 1000}</td> 
                            <td>${order.quantity}</td> 
                            <td>${deliverydate}</td>                   
                            <td id="others">
                                <input type="button" value="Bottle Availability" class="options">
                                <input type="button" value="Clipping" class="options">
                                <input type="button" value="Washing" class="options">
                                <input type="button" value="Rinsing" class="options">
                                <input type="button" value="Filling" class="options">
                                <input type="button" value="Capping" class="options">
                                <input type="button" value="Batch Coding" class="options">
                                <input type="button" value="QC" class="options">
                                <input type="button" value="Packaging" class="options">
                                <input type="button" value="Dispatch" class="options">
                            </td>
                            <td class="timer" data-timer-id="${order.sequence}">00:00:00</td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
            }

            document.querySelectorAll('#others input').forEach(button => {
                button.addEventListener('click', function() {
                    this.style.backgroundColor = "green";
                });
            });
        });
    </script>
</body>
</html>
